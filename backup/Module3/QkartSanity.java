/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lakeshsahu22.Module1;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
// import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
// import java.util.Set;
// import java.util.concurrent.TimeUnit;
import java.time.Duration;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
// import io.github.bonigarcia.wdm.WebDriverManager;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static WebDriver createDriver() throws MalformedURLException {
        // WebDriverManager.chromedriver().setup();
        WebDriver driver = new ChromeDriver();
        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s",
                String.valueOf(java.time.LocalDateTime.now()), type, message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description)
            throws IOException {
        // TO DO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't 2. Generate a unique
         * string using the timestamp 3. Capture screenshot 4. Save the screenshot inside the
         * "/screenshots" folder using the following naming convention:
         * screenshot_<Timestamp>_<ScreenshotType>_<Description>.png eg:
         * screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        File directory = new File("C:/Users/Lakesh Sahu/Desktop/Crio/Selenium Projects/build out/lakeshsahu22-ME_QKART_QA_V2/screenshots");
        if (!directory.exists()) {
            directory.mkdirs();
        }
        String timestamp = String.valueOf(java.time.LocalDateTime.now());
        String fileNa =
                String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType, description);
        String fileName = fileNa.replaceAll(":", "-");
        TakesScreenshot ss = (TakesScreenshot) driver;
        File srcFile = ss.getScreenshotAs(OutputType.FILE);
        File destFile = new File("C:/Users/Lakesh Sahu/Desktop/Crio/Selenium Projects/build out/lakeshsahu22-ME_QKART_QA_V2/screenshots/" + fileName);
        FileUtils.copyFile(srcFile, destFile);
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase01");
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failed", "TestCase01");
            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;
        Thread.sleep(5000);

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            takeScreenshot(driver, "Failed", "TestCase01");
            return false;
        }
        Thread.sleep(5000);

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                status ? "PASS" : "FAIL");

        takeScreenshot(driver, "EndTestCase", "TestCase01");
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase02");
        Boolean status;
        logStatus("Start Testcase",
                "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            takeScreenshot(driver, "Failed", "TestCase02");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;
        Thread.sleep(5000);

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                status ? "FAIL" : "PASS");

        takeScreenshot(driver, "EndTestCase", "TestCase02");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase03");
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_01 : Wait for Page to Load
        // Thread.sleep(5000);

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");

            takeScreenshot(driver, "Failed", "TestCase03");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();

        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3",
                    "Test Case Failure. There were no results for the given search string", "FAIL");

            takeScreenshot(driver, "Failed", "TestCase03");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3",
                        "Test Case Failure. Test Results contains un-expected values: "
                                + elementText,
                        "FAIL");

                takeScreenshot(driver, "Failed", "TestCase03");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");

            takeScreenshot(driver, "Failed", "TestCase01");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success",
                        "Successfully validated that no products found message is displayed",
                        "PASS");
            }
            logStatus("TestCase 3",
                    "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3",
                    "Test Case Fail. Expected: no results , actual: Results were available",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase03");
            return false;
        }
        takeScreenshot(driver, "EndTestCase", "TestCase03");
        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as expected
     */
    public static Boolean TestCase04(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase04");
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        // Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link",
                        "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down",
                        status ? "PASS" : "FAIL");
                if (!status)
                    takeScreenshot(driver, "Failed", "TestCase04");

                // Open the size chart
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody,
                            driver)) {
                        logStatus("Step Success",
                                "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure",
                                "Failure while validating contents of Size Chart Link", "FAIL");
                        takeScreenshot(driver, "Failed", "TestCase04");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    takeScreenshot(driver, "Failed", "TestCase04");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                takeScreenshot(driver, "Failed", "TestCase04");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase04");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is working correctly
     */
    public static Boolean TestCase05(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase05");
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "Failed", "TestCase05");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failed", "TestCase05");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        status = homePage.addProductToCart("YONEX Smash Badminton Racquet");
        if (!status)
            takeScreenshot(driver, "Failed", "TestCase05");
        status = homePage.searchForProduct("Tan");
        status = homePage.addProductToCart("Tan Leatherette Weekender Duffle");
        if (!status)
            takeScreenshot(driver, "Failed", "TestCase05");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        // Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        wait.until(ExpectedConditions.urlContains("/thanks"));

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");
        if (!status)
            takeScreenshot(driver, "Failed", "TestCase05");
        // Go to the home page
        homePage.navigateToHome();

        // Log out the user
        status = homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase06");
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TO DO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TO DO: Register a new user
        registration.navigateToRegisterPage();
        if (!registration.registerUser("lakeshsahu01", "lakeshPassword", true)) {
            System.out.println("Registration Failed");
            takeScreenshot(driver, "Failed", "TestCase06");
            return false;
        }

        // TO DO: Login using the newly registed user
        login.navigateToLoginPage();
        login.PerformLogin(registration.lastGeneratedUsername, "lakeshPassword");
        if (!login.VerifyUserLoggedIn(registration.lastGeneratedUsername)) {
            System.out.println("Login Failed");
            takeScreenshot(driver, "Failed", "TestCase06");
            return false;
        }

        // TO DO: Add "Xtend Smart Watch" to cart
        homePage.searchForProduct("Xtend Smart Watch");
        homePage.addProductToCart("Xtend Smart Watch");

        // TO DO: Add "Yarine Floor Lamp" to cart
        homePage.searchForProduct("Yarine Floor Lamp");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");
        if (!status)
            takeScreenshot(driver, "Failed", "TestCase06");
        homePage.navigateToHome();

        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase06");
        return status;
    }


    public static Boolean TestCase07(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase07");
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failed", "TestCase07");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failed", "TestCase07");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set ", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();

        status = checkoutPage.verifyInsufficientBalanceMessage();
        if (!status)
            takeScreenshot(driver, "Failed", "TestCase07");
        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase07");
        return status;
    }

    public static Boolean TestCase08(WebDriver driver)
            throws InterruptedException, IOException {
        takeScreenshot(driver, "StartTestCase", "TestCase08");
        Boolean status = false;

        // TO DO: CRIO_TASK_MODULE_SYNCHRONISATION -
        logStatus("Start TestCase 8",
                "Test Case 8:  Verify that Products added to cart in one tab get reflected in a new tab",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that Products added to cart in one tab get reflected in a new tab: ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failed", "TestCase08");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that Products added to cart in one tab get reflected in a new tab: ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failed", "TestCase08");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        JavascriptExecutor js = (JavascriptExecutor) driver;
        // js.executeScript("window.open('" + url + "');");
        js.executeScript("window.open('https://crio-qkart-frontend-qa.vercel.app/');");

        List<String> windowHandles = new ArrayList<>(driver.getWindowHandles());
        driver.switchTo().window(windowHandles.get(1));

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("//div[contains(text(),'YONEX Smash Badminton Racquet')]")));

        } catch (Exception e) {
            logStatus("Step Failure", "Product get reflected Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that Products added to cart in one tab get reflected in a new tab: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase08");
            return false;
        }
        logStatus("End TestCase",
                "Test Case 8: Verify that Products added to cart in one tab get reflected in a new tab: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase08");
        driver.close();
        driver.switchTo().window(windowHandles.get(0));
        return status;
    }

    public static Boolean TestCase9(WebDriver driver)
            throws InterruptedException, IOException {
        // TO DO: CRIO_TASK_MODULE_SYNCHRONISATION -
        takeScreenshot(driver, "StartTestCase", "TestCase09");
        Boolean status = false;
        logStatus("Start TestCase",
                "Test Case 9: Verify the contents of the Terms Of Service and Privacy policy pages",
                "DONE");

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        driver.findElement(By.linkText("Privacy policy")).click();
        if (!driver.getCurrentUrl().equals("https://crio-qkart-frontend-qa.vercel.app/")) {
            logStatus("Step Failure", "Current Page URL Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 9: Verify the contents of the Terms Of Service and Privacy policy pages: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase09");
            return false;
        }

        List<String> windowHandles1 = new ArrayList<>(driver.getWindowHandles());
        driver.switchTo().window(windowHandles1.get(1));
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(8));
        try {
            wait.until(ExpectedConditions
                    .presenceOfElementLocated(By.xpath("//h2[text()='Privacy Policy']")));
            status = true;
        } catch (Exception e) {
            logStatus("Step Failure", "Privacy Policy content Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 9: Verify the contents of the Terms Of Service and Privacy policy pages: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase09");
            return false;
        }
        driver.switchTo().window(windowHandles1.get(0));
        driver.findElement(By.linkText("Terms of Service")).click();
        if (!driver.getCurrentUrl().contains("https://crio-qkart-frontend-qa.vercel.app")) {
            logStatus("Step Failure", "Current Page URL Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 9: Verify the contents of the Terms Of Service and Privacy policy pages: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase09");
            return false;
        }
        List<String> windowHandles2 = new ArrayList<>(driver.getWindowHandles());
        driver.switchTo().window(windowHandles2.get(2));
        try {
            wait.until(ExpectedConditions
                    .presenceOfElementLocated(By.xpath("//h2[text()='Terms of Service']")));
            status = true;
        } catch (Exception e) {
            logStatus("Step Failure", "Terms of Service content Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 9: Verify the contents of the Terms Of Service and Privacy policy pages: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase09");
            return false;
        }
        driver.close();
        driver.switchTo().window(windowHandles1.get(1)).close();
        driver.switchTo().window(windowHandles1.get(0));

        logStatus("End TestCase",
                "Test Case 9: Verify the contents of the Terms Of Service and Privacy policy pages: ",
                "PASS");

        takeScreenshot(driver, "EndTestCase", "TestCase09");
        return status;
    }

    public static Boolean TestCase10(WebDriver driver)
            throws InterruptedException, IOException {
        Boolean status = false;
        // TO DO: CRIO_TASK_MODULE_SYNCHRONISATION -
        takeScreenshot(driver, "StartTestCase", "TestCase10");
        logStatus("Start TestCase", "Test Case 10: Verify that the Contact us link works fine",
                "DONE");

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        driver.findElement(By.xpath("//p[text()='Contact us']")).click();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        try {
            wait.until(ExpectedConditions
                    .presenceOfElementLocated(By.xpath("//div[@class='auth-box card']")));
            driver.findElement(By.xpath("//input[@placeholder='Name']")).sendKeys("crio user");
            driver.findElement(By.xpath("//input[@placeholder='Email']"))
                    .sendKeys("criouser@gmail.com");
            driver.findElement(By.xpath("//input[@placeholder='Message']"))
                    .sendKeys("Testing the contact us page");
            driver.findElement(By.xpath("//button[text()=' Contact Now']")).click();
            wait.until(ExpectedConditions
                    .invisibilityOfElementLocated((By.xpath("//button[text()=' Contact Now']"))));
            status = true;
        } catch (Exception e) {
            logStatus("Step Failure", "Contact Us dialog box intraction Failed", "FAIL");
            logStatus("End TestCase", "Test Case 10: Verify that the Contact us link works fine: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase10");
            return false;
        }

        logStatus("End TestCase", "Test Case 10: Verify that the Contact us link works fine: ",
                "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase10");
        return status;
    }

    public static Boolean TestCase11(WebDriver driver)
            throws InterruptedException, IOException {
        Boolean status = true;
        // TO DO: CRIO_TASK_MODULE_SYNCHRONISATION -
        takeScreenshot(driver, "StartTestCase", "TestCase11");
        logStatus("Start TestCase",
                "Test Case 11: Verify that the Advertisements are displayed correctly", "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 11: Verify that the Advertisements are displayed correctly: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase11");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 11: Verify that the Advertisements are displayed correctly: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase11");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));

        wait.until(ExpectedConditions
                .presenceOfElementLocated(By.xpath("//h2[contains(text(),'Yay!')]")));

        List<WebElement> adElements = driver.findElements(By.tagName("iframe"));
        if (adElements.size() != 3) {
            logStatus("Step Failure", "Number of advertisements are not 3 Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 11: Verify that the Advertisements are displayed correctly: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase11");
            return false;
        }
        try {
            driver.switchTo().frame(driver.findElement(By.xpath("//iframe[1]")));
            driver.findElement(By.xpath("//button[text()='Buy Now']")).click();
            wait.until(ExpectedConditions.urlContains("checkout"));
            driver.navigate().back();
            driver.switchTo().parentFrame();

            driver.switchTo().frame(driver.findElement(By.xpath("//iframe[2]")));
            driver.findElement(By.xpath("//button[text()='Buy Now']")).click();
            wait.until(ExpectedConditions.urlContains("checkout"));
            driver.navigate().back();
            driver.switchTo().parentFrame();

            driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@title='scroll']")));
            wait.until(ExpectedConditions
                    .presenceOfElementLocated(By.xpath("//div[text()='COVID-19']")));
        } catch (Exception e) {
            logStatus("Step Failure", "Inside iFrame verification Failed", "FAIL");
            logStatus("End TestCase",
                    "Test Case 11: Verify that the Advertisements are displayed correctly: ",
                    "FAIL");
            takeScreenshot(driver, "Failed", "TestCase11");
            return false;
        }

        logStatus("End TestCase",
                "Test Case 11:  Verify that the Advertisements are displayed correctly: ", "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase11");
        return status;
    }

    public static void main(String[] args) throws Exception {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        WebDriver driver = createDriver();
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

        try {
            // // Execute Test Case 1
            // totalTests += 1;
            // status = TestCase01(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 2
            // totalTests += 1;
            // status = TestCase02(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 3
            // totalTests += 1;
            // status = TestCase03(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 4
            // totalTests += 1;
            // status = TestCase04(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 5
            // totalTests += 1;
            // status = TestCase05(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 6
            // totalTests += 1;
            // status = TestCase06(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 7
            // totalTests += 1;
            // status = TestCase07(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 8
            // totalTests += 1;
            // status = TestCase08(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // // Execute Test Case 9
            // totalTests += 1;
            // status = TestCase9(driver);
            // if (status) {
            // passedTests += 1;
            // }

            // System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 11
            // totalTests += 1;
            // status = TestCase11(driver);
            // if (status) {
            //     passedTests += 1;
            // }

            // System.out.println("");


        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ",
                    Integer.toString(passedTests), Integer.toString(totalTests)));
        }

    }
}
